#!/usr/bin/env scons -Q

from __future__ import division

import glob
import os
import os.path
import functools

from nestly import Nest, stripext
from nestly.scons import SConsWrap
from bioscons.slurm import SlurmEnvironment

def joiner(*args):
    return functools.partial(os.path.join, *args)

environ = os.environ.copy()
for k in ('SLURM_NTASKS', 'SLURM_NPROCS', 'SLURM_NNODES',
          'SLURM_NTASKS_PER_CORE', 'SLURM_CPUS_PER_TASK', 'SLURM_EXCLUSIVE'):
    environ[k] = '1'

env = SlurmEnvironment(ENV=environ)
env.PrependENVPath('PATH', './bin')
env.PrependENVPath('PATH', './src')

env['outdir'] = 'output'

w = SConsWrap(Nest(), dest_dir='output', alias_environment=env)

w.add_aggregate('all_annot', list)
w.add_aggregate('all_dists', list)
w.add('branch_length', [0.01, 0.1, 0.2])
w.add_aggregate('dist_comparisons', list)
w.add('seed', range(10))


@w.add_target_with_env(env)
def trees(env, outdir, c):
    nexus, tree = env.Local(
        ['$OUTDIR/pruned.nex', '$OUTDIR/full.tre'],
        [],
        'generate-trees.py --count 5000 --distance $branch_length $TARGETS')
    env.Depends([nexus, tree], 'bin/generate-trees.py')
    return {'nexus': nexus, 'tree': tree}


@w.add_target_with_env(env)
def fasta(env, outdir, c):
    # Use the master build of bppseqgen: required for --seed
    env.PrependENVPath(
        'PATH',
        '/home/matsengrp/local/encap/bpp-master-20140414/bin')
    env.PrependENVPath(
        'LD_LIBRARY_PATH',
        '/home/matsengrp/local/encap/bpp-master-20140414/lib')
    j = joiner(outdir)
    target = j(stripext(str(c['trees']['tree'])) + '.fasta')
    return env.Local(target, c['trees']['tree'],
                     'bppseqgen '
                     '--seed=$seed '
                     'input.tree.file=$SOURCE '
                     'input.tree.format=Newick '
                     'output.sequence.file=$TARGET '
                     'output.sequence.format=Fasta '
                     'alphabet=DNA '
                     'number_of_sites=10 '
                     'rate_distribution=Constant '
                     'model=JC69 ')[0]


@w.add_target_with_env(env)
def empirical_posterior(env, outdir, c):
    j = joiner(outdir)
    result = env.Command('$OUTDIR/full.empirical.csv',
                         ['$fasta', c['trees']['tree']],
                         'empirical-posterior '
                         'input.tree.file=${SOURCES[1]} '
                         'input.tree.format=Newick '
                         'input.sequence.file=$SOURCE '
                         'input.sequence.format=Fasta '
                         'empirical-posterior.output_path=$TARGET '
                         'empirical-posterior.new_taxon=C')[0]
    return result


w.add('proposal_method', ['guided', 'lcfit', 'uniform-edge'])


@w.add_target_with_env(env)
def sts_online(env, outdir, c):
    j = joiner(outdir)
    result = env.Command(j(stripext(str(c['trees']['nexus'])) + '.sts.json'),
                          ['$fasta', c['trees']['nexus']],
                          'sts-online --proposal-method $proposal_method $SOURCES $TARGET')[0]
    env.Depends(result, 'bin/sts-online')
    return result


@w.add_target_with_env(env)
def comparison(env, outdir, c):
    j = joiner(outdir)
    result, = env.Command(j('bl_comparison.json'),
                          [c['sts_online'], c['empirical_posterior']],
                          'compare-dists.py $SOURCES -o $TARGET')
    return result

w.add_controls(env)


@w.add_target_with_env(env)
def annotated_comparison(env, outdir, c):
    r, = env.Local('$OUTDIR/bl_comparison_annot.json',
                   [c['control'], c['comparison']],
                   "jq -s '.[0] + .[1]' $SOURCES > $TARGET")
    c['all_annot'].append(r)
    return r


@w.add_target_with_env(env)
def distribution_comp_csv(env, outdir, c):
    env['kvs'] = ('proposal_method=$proposal_method '
                  'seed=$seed branch_length=$branch_length')
    r, = env.Local('$OUTDIR/bl_comparison.csv',
                   [c['sts_online'], c['empirical_posterior'], c['control']],
                   'compare-dists.r ${SOURCES[:2]} /dev/stdout | '
                   'decorate-csv.py $kvs > $TARGET')
    c['dist_comparisons'].append(r)

w.pop('seed')


@w.add_target_with_env(env)
def plot_proposal_comparisons(env, outdir, c):
    stacked, = env.Local('$OUTDIR/bl_comparison.csv',
                         c['dist_comparisons'],
                         'csvstack $SOURCES > $TARGET')
    plot, = env.Local('$OUTDIR/bl_comparison.pdf',
                      stacked,
                      'plot-dists.r $SOURCE $TARGET')
    c['all_dists'].append(plot)

w.pop('branch_length')

@w.add_target_with_env(env)
def annotated_plots(env, outdir, c):
    rep, = env.Local('report.html', env.Flatten(['report.Rmd', c['all_annot']]),
                     """R --slave -e 'rmarkdown::render("$SOURCE")' --args ${SOURCES[2:]}""")


@w.add_target_with_env(env)
def combined_dist_plots(env, outdir, c):
    rep, = env.Local('$OUTDIR/bl_comparison.pdf',
                     c['all_dists'],
                     'pdftk $SOURCES cat output $TARGET')

